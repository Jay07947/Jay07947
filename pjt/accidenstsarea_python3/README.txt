###설치된 파일 목록###
<SBJ_2012_001 : COMPAS에서 제공된 데이터>
1. 오산시_주정차단속(2018~2020).csv
2. 오산시_어린이교통사고_격자.geojson
3. 오산시_차량등록현황_격자.geojson
4. 오산시_연령별_거주인구격자(총인구).geojson
5. 오산시_연령별_거주인구격자(유소년).geojson
6. 오산시_연령별_거주인구격자(생산가능인구).geojson
7. 오산시_연령별_거주인구격자(고령).geojson
8. 오산시_유동인구(2019).csv
9. 오산시_어린이보호구역.csv
10. 오산시_학교위치정보.csv
11. 오산시_초등학교_통학구.geojson
12. 오산시_중학교_학군.geojson
13. 오산시_어린이집_유치원현황.csv
14. 오산시_기상데이터(2010~2019).csv
15. 오산시_무인교통단속카메라.csv
16. 오산시_도로안전표지표준데이터.csv
17. 오산시_횡단보도.geojson
18. 오산시_과속방지턱표준데이터.csv
19. 오산시_신호등.geojson
20. 오산시_CCTV설치현황.csv
21. 오산시_인도.geojson
22. 오산시_버스정류장.csv
23. 오산시_상세도로망_LV6.geojson
24. 평일_전일,시간대별_오산시_추정교통량_Level6.csv
25. 평일_전일_오산시_혼잡빈도강도_Level6.csv
26. 평일_전일_오산시_혼잡시간강도_Level6.csv
27. 오산시_도로명주소_건물.geojson
28. 오산시_건물연면적_격자.geojson
29. 오산시_체육시설현황.csv
30. 오산시_학원 및 교습소 현황.csv
31. 오산시_법정경계(시군구).geojson
32. 오산시_행정경계(읍면동).geojson
33. 오산시_법정경계(읍면동).geojson
34. 오산시_지적도.geojson
35. 코드정의서.xlsx

<ETL_DATA : 다듬어 사용되는 데이터>
신호등_오산시.csv
어린이교통사고_오산시.csv
연면적_오산시.csv
유소년인구격자_오산시.csv
횡단보도현황_오산시.csv 
CCTV설치현황_오산시.csv  => (교통안전과 관련된 CCTV(C-어린이보호, E-과속단속)+ 무인교통단속카메라 )
학원 및 교습소 현황_오산시.csv
체육시설현황_오산시.csv
과속방지턱_오산시.csv
어린이집_유치원현황_오산시.csv
학교위치정보_오산시.csv  => 초등학교 데이터만 추출
어린이보호구역_오산시.csv
유아인구격자_오산시.geojson
(행정동별)오산시어린이인구수.csv


<ETL_DATA : 코드 실행 후 만들어질 데이터>
OsanDataset.csv  => 모델학습과 결과 예측에 쓰이는 데이터셋 

<RESULT : 코드 실행 후 만들어질 데이터>
org.csv            =>  오산시 전체 지역에 대한 예측결과
result_not.csv    =>  오산시 어린이보호구역 외 상위 위험지역 20개 예측결과
result_sz.csv      =>  오산시 어린이보호구역 내 상위 위험지역 20개 예측결과
merge.csv        =>  제출을 위한 결과 파일

<제출결과물 : 최종 제출용 파일>
분석보고서_5959.pptx
오산시 데이터 분석파일(PowerBI).zip
결과파일_5959.xlsx 


###오산시 데이터셋 변환 과정###
>> 메개변수 설정을 위한 데이터 분석
>> 데이터를 모두 합쳐 인공지능 모델에 돌리기 위한 데이터 프레임을 만들기 위함
1. geojson을 csv 파일로 변환
  (1) API로 geojson 파일 불러오기  
  (2) geojson을 json으로 변환
  (3) json을 csv 형식으로 변환

2. csv 파일 사용

###파일을 돌리는 순서###
(** 실행 전 파일 실행시키기 위해 jupyter notebook 혹은 visual studio code 및 python, jupyter를 설치해주고, pandas 및 numpy를 명령프롬프트 창에서 설치해준다 **)

1. 오산시 데이터셋 변환 및 병합
2. 인공지능모델생성
3. 결과데이터생성
4. 격자별 안전시설물 설치시 시뮬레이션


###1. 오산시 데이터셋 변환 및 병합###
>> 데이터를 모두 합쳐 인공지능 모델에 돌리기 위한 데이터 프레임을 만들기 위함
1. 사고 격자 데이터를 호출하기 위해 #1번 코드 실행
2. #2-1~#2-15까지 코드를 실행하여 교통사고 관련 위험요소를 데이터 프레임에 추가
3. 어린이 이용 시설 및 기타 데이터에 대한 거리 가중치 부여

###2. 인공지능모델생성###
>> 인공지능모델을 사용하여 dump 파일을 만들기 위함
(** 실행 전 파일을 실행시키기 위해 라이브러리 설치가 필요하다. 명령프롬프트창에서 sklearn을 설치해준다.
 ex> pip install scikit-learn)
1. 설치된 라이브러리를 사용하기 위해 호출해준다. 
(KNN, 의사결정트리, 랜덤포레스트를 전부 사용해봤을 때, 가장 효율적이고 정확도가 높았던 랜덤포레스트 모델을 만들어줄 예정)
2. 데이터를 준비하고, 사용되지 않을 컬럼을 삭제한다. 학습용과 시험용으로 분리하고, 데이터를 섞어준다.
3. 머신러닝 알고리즘을 선택하고 훈련시킨다. 
 
###3. 결과데이터생성###
>> 오산시 전체 지역에 대해 100m*100m 단위로 중심 지점에 대해 위험도를 예측하기 위함
1. 가중치가 이미 부여되어 있는 데이터 셋을 호출한다
2. 모델에 넣을 수 있도록 위치데이터를 삭제한다
3. 의미 없는 지역(건물이나 시설물, 거주인구 등 데이터가 하나도 없는곳)은 속도를 위해 제거해준다
4. 모델에 돌려 결과를 얻고 위치데이터를 다시 연결해준다
5. A등급 지역을 확인하고, 어린이보호구역과 아닌 지역을 분류한다
6. 결과 파일을 csv로 저장한다

###4. 격자별 안전시설물 설치시 시뮬레이션###
>> 예측된 위험지역에 대해 적절한 안전조치를 취했을 때의 위험도 하락을 시뮬레이션하기 위함
1. 확인하고 싶은 위험지역의 id 를 확인한다
2. 작성되어 있는 함수로 현재 위험도와 안전시설물 설치 현황을 확인한다.
3. 작성되어 있는 함수로 설치할 안전시설물에 대한 변수를 변경하여 위험도 하락 시뮬레이션 결과를 확인한다.



